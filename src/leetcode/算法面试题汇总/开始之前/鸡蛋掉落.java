package leetcode.算法面试题汇总.开始之前;

/**
 * 鸡蛋掉落
 * 你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。
 *
 * 每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。
 *
 * 你知道存在楼层 F ，满足 0 <= F <= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。
 *
 * 每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 <= X <= N）。
 *
 * 你的目标是确切地知道 F 的值是多少。
 *
 * 无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？
 *
 *
 *
 * 示例 1：
 *
 * 输入：K = 1, N = 2
 * 输出：2
 * 解释：
 * 鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。
 * 否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。
 * 如果它没碎，那么我们肯定知道 F = 2 。
 * 因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。
 * 示例 2：
 *
 * 输入：K = 2, N = 6
 * 输出：3
 * 示例 3：
 *
 * 输入：K = 3, N = 14
 * 输出：4
 *
 *
 * 提示：
 *
 * 1 <= K <= 100
 * 1 <= N <= 10000
 */

public class 鸡蛋掉落 {

    public int superEggDrop(int K, int N) {

        // 1. 根据楼层和鸡蛋数获取移动数，会超出时间限制
//         int[][] ans = new int[K + 1][N + 1];
//         for (int i = 1; i <= K; i++) {
//             ans[i][1] = 1;
//             ans[i][0] = 0;
//         }
//         for (int j = 1; j <= N; j++) {
//             ans[1][j] = j;
//             ans[0][j] = 0;
//         }
//         ans[0][0] = 0;

//         for (int i = 2; i <= K; i++) {
//             for (int j = 2; j <= N; j++) {

//                 int min = Integer.MAX_VALUE;
//                 for (int f = 1; f <= j; f++) {
//                     int max = Math.max(ans[i][j - f], ans[i - 1][f - 1]) + 1;
//                     if (min > max) {
//                         min = max;
//                     }
//                 }
//                 ans[i][j] = min;

//             }
//         }

//         return ans[K][N];



        // 2. 根据鸡蛋数和移动数获取能测量的楼层数
        // int[][] dp = new int[N + 1][K + 1];
        // // 移动0次可以测出的楼层数为0，默认为0，其实不需要写
        // // for (int j = 0; j <= K; j++) {
        // //     dp[0][j] = 0;
        // // }
        // for (int i = 1; i <= N; i++) {
        //     for (int j = 1; j <= K; j++) {
        //         // j个鸡蛋移动i次可以测出的楼层数 =
        //         // j个鸡蛋移动i - 1次可以测出的楼层数（鸡蛋没碎） + j - 1个鸡蛋移动i - 1次可以测出的楼层数（鸡蛋碎了） + 1;
        //         dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + 1;
        //         if (dp[i][j] >= N) {
        //             return i;
        //         }
        //     }
        // }
        // return -1;


        // 第2种方法的优化
        int m = 0;
        int[] dp = new int[K + 1];
        while (dp[K] < N) {
            for (int i = K; i >= 1; i--) {
                dp[i] += dp[i - 1] + 1;
            }
            m++;
        }
        return m;


    }

}
